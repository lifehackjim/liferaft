#! Ruff configuration file https://github.com/astral-sh/ruff
cache-dir = ".cache/.ruff_cache" # str, ".ruff_cache", Specifies a custom cache directory for storing the cache files generated by ruff
output-format = "grouped"        # str, concise, full|concise|grouped|json|junit|github|gitlab|pylint|azure, The style in which violation messages should be formatted: "full" (shows source),"concise" (default), "grouped" (group messages by file), "json" (machine-readable), "junit" (machine-readable XML), "github" (GitHub Actions annotations), "gitlab" (GitLab CI code quality report), "pylint" (Pylint text format) or "azure" (Azure Pipeline logging commands).
required-version = ">=0.3.4"     # str, null, Enforce a requirement on the version of Ruff, to enforce at runtime. If the version of Ruff does not meet the requirement, Ruff will exit with an error.
target-version = "py310"         # str, py38, py37|py38|py39|py310|py311|py312, The minimum Python version to target, e.g., when considering automatic code upgrades, like rewriting type annotations. Ruff will not propose changes using features that are not available in the given version. Will fallback to project.requires-python if not set.
# extend = "" # str, null, A path to a local pyproject.toml file to merge into this configuration. User home directory and environment variables will be expanded.

indent-width = 4  # int, 4, The number of spaces per indentation level (tab).
line-length = 100 # int, 88, The line length to use when enforcing long-lines violations (like E501) and at which isort and the formatter prefers to wrap lines.

fix = false              # bool, false, Enable fix behavior by-default when running ruff (overridden by the --fix and --no-fix command-line flags). Only includes automatic fixes unless --unsafe-fixes is provided.
fix-only = false         # bool, false, Like fix, but disables reporting on leftover violation. Implies fix.
force-exclude = false    # bool, false, Whether to enforce exclude and extend-exclude patterns, even for paths that are passed to Ruff explicitly.
preview = true           # bool, false, Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.
respect-gitignore = true # bool, true, Whether to automatically exclude files that are ignored by .ignore, .gitignore, .git/info/exclude, and global gitignore files.
show-fixes = true        # bool, false, Whether to show an enumeration of all fixed lint violations (overridden by the --show-fixes command-line flag).
unsafe-fixes = true      # bool, null, Whether to apply unsafe fixes. If excluded, a hint will be displayed when unsafe fixes are available. If set to false, the hint will be hidden.

extend-exclude = [
    #? list[str], [], Patterns to omit from formatting and linting, in addition to those specified by exclude.
    ".cache",
    "artifacts",
    ".venv",
]
src = [
    #? list[str], ["."], The directories to consider when resolving first- vs. third-party imports.
    "src",
    "tests",
]
# builtins = [] # list[str], [], Builtins to treat as defined references, in addition to the system builtins.
# exclude = [] # list[str], [".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".mypy_cache", ".nox", ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv", "__pypackages__", "_build", "buck-out", "dist", "node_modules", "venv"], File patterns to exclude from formatting and linting.
# include = [] # list[str], ["*.py", "*.pyi", "**/pyproject.toml"], File patterns to include when linting.
# namespace-packages = [] # list[str], [], Mark the specified directories as namespace packages. For the purpose of module resolution, Ruff will treat those directories as if they contained an __init__.py file.

[format] #! Configures how ruff formats code.
docstring-code-line-length = "dynamic" # int|dynamic, dynamic, The line length to use when formatting code snippets in docstrings.
indent-style = "space"                 # str, space, space|tab, Whether to use spaces or tabs for indentation.
line-ending = "auto"                   # str, auto, auto|lf|cr-lf|native, The character Ruff uses at the end of a line.
quote-style = "double"                 # str, double, double|single|preserve, The quote style to use for strings.

docstring-code-format = true      # bool, false, Enable reformatting of code snippets in docstrings.
preview = true                    # bool, false, Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.
skip-magic-trailing-comma = false # bool, false, Whether to ignore the magic trailing comma.

# exclude = [] # list[str], [], File patterns to exclude from formatting in addition to the files excluded globally (see exclude, and extend-exclude).

[lint] #! Configure how ruff checks code.
# dummy-variable-rgx = "" # str, "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$", A regular expression used to identify "dummy" variables, or those which should be ignored when enforcing (e.g.) unused-variable rules. The default expression matches _, __, and _var, but not _var_.

explicit-preview-rules = false    # bool, false, Whether to require exact codes to select preview rules.
ignore-init-module-imports = true # bool, false, Whether to avoid automatically removing unused imports in __init__.py files.
preview = true                    # bool, false, Whether to enable preview mode. When preview mode is enabled, Ruff will use unstable rules and fixes.

select = [
    #? list[str], ["E4", "E7", "E9", "F"], Rule codes or prefixes to enable. Prefixes can specify exact rules (like F841), entire categories (like F), or anything in between.
    "ALL", # Enable all rules by default
]
ignore = [
    #? list[str], [], Rule codes or prefixes to ignore. Prefixes can specify exact rules (like F841), entire categories (like F), or anything in between.
    "COM812", # flake8-commas "Trailing comma missing" - conflicts with ISC001
    "ISC001", # isort "Trailing comma missing" - conflicts with COM812
    "CPY001", # flake8-copyright "Missing copyright header" - i don't want to enforce this
]
# allowed-confusables = [] # list[str], [], Allowed "confusable" Unicode characters to ignore when enforcing RUF001, RUF002, and RUF003.
# exclude = [] # list[str], [], File patterns to exclude from linting in addition to the files excluded globally (see exclude, and extend-exclude).
# extend-fixable = [] # list[str], [], Rule codes or prefixes to consider fixable, in addition to those specified by fixable.
# extend-select = [] # list[str], [], Rule codes or prefixes to enable, in addition to those specified by select.
# extend-unfixable = [] # list[str], [], Rule codes or prefixes for which safe fixes should be considered unsafe.
# extend-unsafe-fixes = [] # list[str], [], Rule codes or prefixes for which unsafe fixes should be considered safe.
# external = [] # list[str], [], Rule codes or prefixes that are unsupported by Ruff, but should be preserved when (e.g.) validating # noqa directives. Useful for retaining # noqa directives that cover plugins not yet implemented by Ruff.
# fixable = [] # list[str], ["ALL"], Rule codes or prefixes to consider fixable. By default, all rules are considered fixable.
# logger-objects = [] # list[str], [], Objects that should be treated equivalently to a logging.Logger object.
# task-tags = [] # list[str], [...], Task tags to recognize
# typing-modules = [] # list[str], [], Modules whose exports should be treated equivalently to members of the typing module.
# unfixable = [] # list[str], [], Rule codes or prefixes to consider non-fixable.

# [lint.per-file-ignores] #! Configures per-file ignores for ruff.

[lint.extend-per-file-ignores] #! Configures additional per-file ignores for ruff.
"**/tests/**/*.py" = [
    #? disable some rules for tests
    "S101",    # flake8-bandit "Use of assert detected"
    "PLC1901", # pylint "compare-to-empty-string"
    "PLR2004", # pylint "magic-value-comparison"
    "PLR6301", # pylint "no-self-use"
]

[lint.flake8-annotations] #! Configures the flake8-annotations plugin for Ruff.
allow-star-arg-any = false      # bool, false, Whether to suppress ANN401 for dynamically typed *args and **kwargs arguments.
ignore-fully-untyped = false    # bool, false, Whether to suppress ANN* rules for any declaration that hasn't been typed at all. This makes it easier to gradually add types to a codebase.
mypy-init-return = false        # bool, false, Whether to allow the omission of a return type hint for __init__ if at least one argument is annotated.
suppress-dummy-args = false     # bool, false, Whether to suppress ANN000-level violations for arguments matching the "dummy" variable regex (like _).
suppress-none-returning = false # bool, false, Whether to suppress ANN200-level violations for functions that meet either of the following criteria:

[lint.flake8-bandit] #! Configures the flake8-bandit plugin for Ruff.
check-typed-exception = true # bool, false, Whether to disallow try-except-pass (S110) for specific exception types. By default, try-except-pass is only dis

# extend-hardcoded-tmp-directory = [] # list[str], [], Directories to consider temporary, in addition to those specified by hardcoded-tmp-directory.
# hardcoded-tmp-directory = [] # list[str], ["/tmp", "/var/tmp", "/dev/shm"], Directories to consider temporary.

# [lint.flake8-bugbear] #! Configures the flake8-bugbear plugin for Ruff.
# extend-immutable-calls = [] # list[str], [], Additional callable functions to consider "immutable" when evaluating, e.g., the function-call-in-default-argument rule (B008) or function-call-in-dataclass-defaults rule (RUF009).

# [lint.flake8-builtins] #! Configures the flake8-builtins plugin for Ruff.
# builtins-ignorelist = [] # list[str], [], Ignore list of builtins.

[lint.flake8-comprehensions] #! Configures the flake8-comprehensions plugin for Ruff.
allow-dict-calls-with-keyword-arguments = false # bool, false, Whether to allow dict calls that make use of keyword arguments (e.g., dict(a=1, b=2)).

# [lint.flake8-copyright] #! Configures the flake8-copyright plugin for Ruff.
# author = "" # str, null, Author to enforce within the copyright notice.
# notice-rgx = "" # str, "(?i)Copyright\s+((?:\(C\)|©)\s+)?\d{4}([-,]\d{4})*", The regular expression used to match the copyright notice, compiled with the regex crate.

# min-file-size = 0 # int, 0, A minimum file size (in bytes) required for a copyright notice to be enforced. By default, all files are validated.

# [lint.flake8-errmsg] #! Configures the flake8-errmsg plugin for Ruff.
# max-string-length = 0 # int, 0, Maximum string length for string literals in exception messages.

# [lint.flake8-gettext] #! Configures the flake8-gettext plugin for Ruff.
# extend-function-names = [] # list[str], [], Additional function names to consider as internationalization calls, in addition to those included in function-names.
# function-names = [] # list[str], ["_", "gettext", "ngettext"], The function names to consider as internationalization calls.

[lint.flake8-implicit-str-concat] #! Configures the flake8-implicit-str-concat plugin for Ruff.
allow-multiline = false # bool, false, Whether to allow implicit string concatenations for multiline strings. By default, implicit concatenations of multiline strings are allowed (but continuation lines, delimited with a backslash, are prohibited).

[lint.flake8-import-conventions] #! Configures the flake8-import-conventions plugin for Ruff.
banned-from = [
    #? list[str], [], Modules that should not be imported from using the from ... import ... syntax.
    "typing", # Force usage of `import typing as t` instead of `from typing import List`
]

[lint.flake8-import-conventions.extend-aliases] #! Configures the flake8-import-conventions plugin for Ruff with additional mappings from module to conventional import alias.
"typing" = "t" # Set "t" as the conventional alias for the "typing" module.

# [lint.flake8-import-conventions.aliases] #! Configures the flake8-import-conventions plugin for Ruff with import aliases.
# default: {"altair": "alt", "matplotlib": "mpl", "matplotlib.pyplot": "plt", "numpy": "np", "pandas": "pd", "seaborn": "sns", "tensorflow": "tf", "tkinter": "tk", "holoviews": "hv", "panel": "pn", "plotly.express": "px", "polars": "pl", "pyarrow": "pa"}

# [lint.flake8-import-conventions.banned-aliases] #! Configures the flake8-import-conventions plugin for Ruff with banned import aliases.

[lint.flake8-pytest-style] #! Configures the flake8-pytest-style plugin for Ruff.
parametrize-names-type = "tuple"      # str, tuple, csv|tuple|list, Expected type for multiple argument names in @pytest.mark.parametrize.
parametrize-values-row-type = "tuple" # str, tuple, tuple|list, Expected type for each row of values in @pytest.mark.parametrize in case of multiple parameters.
parametrize-values-type = "list"      # str, list, tuple|list, Expected type for the list of values rows in @pytest.mark.parametrize.

fixture-parentheses = true # bool, true, whether @pytest.fixture() without parameters should have parentheses. If the option is set to true (the default), @pytest.fixture() is valid and @pytest.fixture is invalid. If set to false, @pytest.fixture is valid and @pytest.fixture() is invalid.
mark-parentheses = true    # bool, true, whether @pytest.mark.foo() without parameters should have parentheses. If the option is set to true (the default), @pytest.mark.foo() is valid and @pytest.mark.foo is invalid. If set to false, @pytest.fixture is valid and @pytest.mark.foo() is invalid.

# raises-extend-require-match-for = [] # list[str], [], Additional exception names that require a match= parameter in a pytest.raises() call. This extends the default list of exceptions that require a match= parameter.
# raises-require-match-for = [] # list[str], ["BaseException", "Exception", "ValueError", "OSError", "IOError", "EnvironmentError", "socket.error"], Exception names that require a match= parameter in a pytest.raises() call.

[lint.flake8-quotes] #! Configures the flake8-quotes plugin for Ruff.
docstring-quotes = "double" # str, double, single|double, Quote style to prefer for docstrings.
inline-quotes = "double"    # str, double, single|double, Quote style to prefer for inline strings.
multiline-quotes = "double" # str, double, single|double, Quote style to prefer for multiline strings.

avoid-escape = true # bool, false, Whether to avoid using single quotes if a string contains single quotes, or vice-versa with double quotes, as per PEP 8.

# [lint.flake8-self] #! Configures the flake8-self plugin for Ruff.
# extend-ignore-names = [] # list[str], [], Additional names to ignore when considering flake8-self violations, in addition to those included in ignore-names.
# ignore-names = [] # list[str], ["_make", "_asdict", "_replace", "_fields", "_field_defaults", "_name_", "_value_"], Names to ignore when considering flake8-self violations.

[lint.flake8-tidy-imports] #! Configures the flake8-tidy-imports plugin for Ruff.
ban-relative-imports = "all" # str, parents, parents|all, Whether to ban all relative imports ("all"), or only those imports that extend into the parent module or beyond ("parents").

# banned-module-level-imports = [] # list[str], [], List of specific modules that may not be imported at module level, and should instead be imported lazily (e.g., within a function definition, or an if TYPE_CHECKING: block, or some other nested context).

# [lint.flake8-tidy-imports.banned-api] #! Configures the flake8-tidy-imports plugin for Ruff with banned API imports.

[lint.flake8-type-checking] #! Configures the flake8-type-checking plugin for Ruff.
quote-annotations = false # bool, false, Whether to add quotes around type annotations, if doing so would allow the corresponding import to be moved into a type-checking block.
strict = true             # bool, false, Whether to enforce TC001, TC002, and TC003 rules even when valid runtime imports are present for the same module.

# exempt-modules = [] # list[str], ["typing"], Exempt certain modules from needing to be moved into type-checking blocks.
# runtime-evaluated-base-classes = [] # list[str], [], Exempt classes that list any of the enumerated classes as a base class from needing to be moved into type-checking blocks.
# runtime-evaluated-decorators = [] # list[str], [], Exempt classes and functions decorated with any of the enumerated decorators from being moved into type-checking blocks.

[lint.flake8-unused-arguments] #! Configures the flake8-unused-arguments plugin for Ruff.
ignore-variadic-names = false # bool, false, Whether to allow unused variadic arguments, like *args and **kwargs.

[lint.isort] #! Configures the isort plugin for Ruff.
default-section = "third-party"                # str, third-party, Define a default section for any imports that don't fit into the specified section-order.
relative-imports-order = "furthest-to-closest" # str, furthest-to-closest, furthest-to-closest|closest-to-furthest, Whether to place "closer" imports (fewer . characters, most local) before "further" imports (more . characters, least local), or vice versa.

lines-after-imports = -1 # int, -1, The number of blank lines to place after imports. Use -1 for automatic determination.
lines-between-types = 0  # int, 0, The number of lines to place between "direct" and import from imports.

case-sensitive = false             # bool, false, Sort imports taking into account case sensitivity.
combine-as-imports = true          # bool, false, Combines as imports on the same line.
detect-same-package = true         # bool, false, Automatically mark imports from within the same package as first-party.
force-single-line = false          # bool, false, Forces all from imports to appear on their own line.
force-sort-within-sections = false # bool, false, Don't sort straight-style imports (like import sys) before from-style imports (like from itertools import groupby). Instead, sort the imports by module, independent of import style.
force-wrap-aliases = false         # bool, false, Force import from statements with multiple members and at least one alias (e.g., import A as B) to wrap such that every line contains exactly one member. Only effective when combined with combine-as-imports = true.
from-first = false                 # bool, false, Whether to place import from imports before straight imports when sorting.
length-sort = false                # bool, false, Sort imports by their string length, such that shorter imports appear before longer imports.
length-sort-straight = false       # bool, false, Sort straight imports by their string length. Similar to length-sort, but applies only to straight imports and doesn't affect from imports.
no-sections = false                # bool, false, Put all imports into the same section bucket.
order-by-type = true               # bool, true, Order imports by type, which is determined by case, in addition to alphabetically.
split-on-trailing-comma = true     # bool, true, If a comma is placed after the last member in a multi-line import, then the imports will never be folded into one line.

known-first-party = [
    #? list[str], [], Modules to consider first-party, regardless of whether they can be identified as such via introspection of the local filesystem. Supports glob patterns.
    "liferaft",
]
section-order = [
    #? list[str], ["future", "standard-library", "third-party", "first-party", "local-folder", "str"], The order in which sections should be output. By default, sections are output in the order: future, standard-library, third-party, first-party, local-folder, str.
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
no-lines-before = [
    #? list[str], [], Sections that should not be delineated from the previous section via empty lines.
    "future",
    "standard-library",
]
# classes = [] # list[str], [], An override list of tokens to always recognize as a Class for order-by-type regardless of casing.
# constants = [] # list[str], [], An override list of tokens to always recognize as a CONSTANT for order-by-type regardless of casing.
# extra-standard-library = [] # list[str], [], Modules to consider standard-library, in addition to those known to Ruff in advance.
# force-to-top = [] # list[str], [], Force specific imports to the top of their appropriate section.
# forced-separate = [] # list[str], [], Modules to separate into auxiliary block(s) of imports, in the order specified.
# known-local-folder = [] # list[str], [], Modules to consider being a local folder. Generally, this is reserved for relative imports (from . import module). Supports glob patterns.
# known-third-party = [] # list[str], [], Modules to consider third-party, regardless of whether they can be identified as such via introspection of the local filesystem. Supports glob patterns.
# required-imports = [] # list[str], [], Add the specified import lines to all files.
# single-line-exclusions = [] # list[str], [], One or more modules to exclude from the single line rule.
# variables = [] # list[str], [], An override list of tokens to always recognize as a var for order-by-type regardless of casing.

# [lint.isort.sections] #! Configures custom sections for isort.
# # example: "django" = ["django"]

[lint.mccabe] #! Configures the mccabe plugin for Ruff.
max-complexity = 15 # int, 10, The maximum McCabe complexity to allow before triggering C901 errors.

[lint.pep8-naming] #! Configures the pep8-naming plugin for Ruff.
classmethod-decorators = [
    #? list[str], [], Decorators that, when applied to a method, indicate that the method should be treated as a class method (in addition to the builtin @classmethod).
    "pydantic.validator", # Allow Pydantic's `@validator` decorator to trigger class method treatment.
]
# extend-ignore-names = [] # list[str], [], Additional names (or patterns) to ignore when considering pep8-naming violations, in addition to those included in ignore-names.
# ignore-names = [] # list[str], ["setUp", "tearDown", "setUpClass", "tearDownClass", "setUpModule", "tearDownModule", "asyncSetUp", "asyncTearDown", "setUpTestData", "failureException", "longMessage", "maxDiff"], Names to ignore when considering pep8-naming violations.
# staticmethod-decorators = [] # list[str], [], Decorators that, when applied to a method, indicate that the method should be treated as a static method (in addition to the builtin @staticmethod).

[lint.pycodestyle] #! Configures the pycodestyle plugin for Ruff.
max-doc-length = 95   # int, null, The maximum line length to allow for doc-line-too-long violations within documentation (W505), including standalone comments.
max-line-length = 100 # int, null, The maximum line length to allow before triggering E501 violations.

ignore-overlong-task-comments = false # bool, false, Whether line-length violations (E501) should be triggered for comments starting with task-tags

[lint.pydocstyle] #! Configures the pydocstyle plugin for Ruff.
convention = "google" # str, null, google|numpy|pep257, The docstring convention to enforce.

# ignore-decorators = [] # list[str], [], Decorators that, when applied to a function or method, indicate that the docstring should be ignored.
# property-decorators = [] # list[str], [], Decorators that, when applied to a method, indicate that the method should be treated as a property (in addition to the builtin @property and standard-library @functools.cached_property).

# [lint.pyflakes] #! Configures the pyflakes plugin for Ruff.
# extend-generics = [] # list[str], [], Additional functions or classes to consider generic, such that any subscripts should be treated as type annotation (e.g., ForeignKey in django.db.models.ForeignKey["User"]).

[lint.pylint] #! Configures the pylint plugin for Ruff.
max-args = 15           # int, 5, Maximum number of arguments allowed for a function or method definition (see: PLR0913).
max-bool-expr = 5       # int, 5, Maximum number of Boolean expressions allowed within a single if statement (see: PLR0916).
max-branches = 12       # int, 12, Maximum number of branches allowed for a function or method body (see: PLR0912).
max-locals = 15         # int, 15, Maximum number of local variables allowed for a function or method body (see: PLR0914).
max-nested-blocks = 5   # int, 5, Maximum number of nested blocks allowed within a function or method body (see: PLR1702).
max-positional-args = 5 # int, 5, Maximum number of positional arguments allowed for a function or method definition (see: PLR0917).
max-public-methods = 20 # int, 20, Maximum number of public methods allowed for a class (see: PLR0904).
max-returns = 6         # int, 6, Maximum number of return statements allowed for a function or method body (see PLR0911).
max-statements = 50     # int, 50, Maximum number of statements allowed for a function or method body (see: PLR0915).

# allow-dunder-method-names = [] # list[str], [], Dunder methods name to allow, in addition to the default set from the Python standard library (see: PLW3201).
# allow-magic-value-types = [] # list[str], [str,bytes], str|bytes|complex|float|int, Constant types to ignore when used as "magic values" (see: PLR2004).

[lint.pyupgrade] #! Configures the pyupgrade plugin for Ruff.
keep-runtime-typing = false # bool, false, Whether to avoid PEP 585 (List[int] -> list[int]) and PEP 604 (Union[str, int] -> str | int) rewrites even if a file imports from __future__ import annotations.
